# v1.3.0-marketplace

name: VC deployment
on:
  workflow_dispatch:
    inputs:
      artifactUrl: 
        description: 'Full link to artifact docker image or artifact download url'
        required: true
      deployEnvironment: 
        description: 'Deployment environment type. Allowed values: dev, qa, prod'
        required: true
        default: 'dev'
      deployConfigPath:
        description: 'Full path to argoDeploy.json'
        required: true
        default: 'argoDeploy.json'
      jiraKeys:
        description: 'Deployed artifact Jira keys (for cycle time report)'
        required: false
        default: ''

jobs:
  cd:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      ARGO_SERVER: 'argo.govirto.com'

    steps: 

    - name: Read deployment config
      uses: VirtoCommerce/vc-github-actions/get-deploy-param@master
      id: deployConfig
      with:
        envName: ${{ github.event.inputs.deployEnvironment }}
        deployConfigPath: ${{ github.event.inputs.deployConfigPath }}

    - name: Start deployment
      uses: bobheadxi/deployments@master
      id: deployment
      with:
        step: start
        token: ${{ secrets.GITHUB_TOKEN }}
        env: ${{ steps.deployConfig.outputs.environmentName }}
        no_override: false

    - name: Update deployment-cm
      uses: VirtoCommerce/vc-github-actions/create-deploy-pr@master
      with:
        deployRepo: ${{ steps.deployConfig.outputs.deployRepo }}
        deployBranch: ${{ steps.deployConfig.outputs.deployBranch }}
        artifactKey: ${{ steps.deployConfig.outputs.artifactKey }}
        artifactUrl: ${{ github.event.inputs.artifactUrl }}
        taskNumber: "undefined"
        forceCommit: "true"
        cmPath: ${{ steps.deployConfig.outputs.cmPath }}

    - name: Wait for environment is up
      uses: VirtoCommerce/vc-github-actions/vc-argocd-cli@master
      id: argocd-cli
      with:
        server: ${{env.ARGO_SERVER}}
        username: ${{ secrets.ARGOCD_LOGIN }}
        password: ${{ secrets.ARGOCD_PASSWORD }}
        command: app wait ${{ steps.deployConfig.outputs.deployAppName }}

    - name: DEPLOY_STATE::successful
      if: success()
      run: echo "DEPLOY_STATE=successful" >> $GITHUB_ENV

    - name: DEPLOY_STATE::failed
      if: failure()
      run: echo "DEPLOY_STATE=failed"  >> $GITHUB_ENV

    - name: Update GitHub deployment status
      uses: bobheadxi/deployments@master
      if: always()
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}