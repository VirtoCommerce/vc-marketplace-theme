# v1.4.vc-theme-marketplace
name: Theme CI
on:
  workflow_dispatch:
  push:
    branches:
      [master, dev]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'build/**'
      - 'README.md'
      - 'LICENSE'
      - '**/argoDeploy.json'
  pull_request:
    branches:
      [master, dev]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'build/**'
      - 'README.md'
      - 'LICENSE'
      - '**/argoDeploy.json'

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      BLOB_SAS: ${{ secrets.BLOB_TOKEN }}
      VERSION_SUFFIX: ''
    outputs:
      artifactUrl: ${{ steps.blobRelease.outputs.packageUrl }}


    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: '16.x'

      - name: Get Image Version
        uses: VirtoCommerce/vc-github-actions/get-image-version@master
        id: image

      - name: Set release variables
        run: |
          echo "VERSION_SUFFIX=${{ steps.image.outputs.suffix }}" >> $GITHUB_ENV

      - name: Set release-alpha variables
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "VERSION_SUFFIX=${{ steps.image.outputs.fullSuffix }}" >> $GITHUB_ENV

      - name: Set PR variables
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "VERSION_SUFFIX=${{ steps.image.outputs.suffix }}-${{ steps.image.outputs.SHA }}" >> $GITHUB_ENV

      - name: Get changelog
        id: changelog
        uses: VirtoCommerce/vc-github-actions/changelog-generator@master

      - name: Build
        if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' }}
        id: build
        uses: VirtoCommerce/vc-github-actions/build-vue-theme@master
        with:
          versionSuffix:  ${{ env.VERSION_SUFFIX }}

      - name: Publish
        if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/master')}}
        id: publish
        uses: VirtoCommerce/vc-github-actions/publish-theme@master
        with:
          artifactPath: ${{ steps.build.outputs.artifactPath }}
          artifactName: ${{ steps.build.outputs.artifactName }}

      - name: Add link to PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: VirtoCommerce/vc-github-actions/publish-artifact-link@master
        with:
          artifactUrl: ${{ steps.publish.outputs.blobUrl }}

      - name: Create Release
        if: ${{ github.ref == 'refs/heads/master' }}
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.image.outputs.prefix }}
          release_name: ${{ steps.image.outputs.prefix }}
          draft: false
          prerelease: false
          body: ${{ steps.changelog.outputs.changelog }}

      - name: Upload Release Asset
        if: ${{ github.ref == 'refs/heads/master' }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build.outputs.artifactPath }}
          asset_name: ${{ steps.build.outputs.artifactName }}
          asset_content_type: application/zip

  dev_cd:
    if: github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/master')
    needs: ci
    runs-on: ubuntu-latest
    env:
      DEPLOYMENT_ENV: 'dev'
      DEPLOY_CONFIG_PATH: '.deployment/vc-deploy-marketplace/argoDeploy.json'
    steps:
      - name: Invoke Module deployment workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: VC deployment
          token: ${{ secrets.REPO_TOKEN }}
          inputs: '{ "artifactUrl": "${{ needs.ci.outputs.artifactUrl }}", "deployEnvironment": "${{ env.DEPLOYMENT_ENV }}", "deployConfigPath": "${{ env.DEPLOY_CONFIG_PATH }}" }'

